libpkgmanifest_sources = [
    'api/manifest/module.cpp',
    'api/manifest/checksum.cpp',
    'api/manifest/packages.cpp',
    'api/manifest/serializer.cpp',
    'api/manifest/parser.cpp',
    'api/manifest/nevra.cpp',
    'api/manifest/manifest.cpp',
    'api/manifest/package.cpp',
    'api/input/packages.cpp',
    'api/input/modules.cpp',
    'api/input/options.cpp',
    'api/input/parser.cpp',
    'api/input/input.cpp',
    'api/common/version.cpp',
    'api/common/exception.cpp',
    'api/common/repository.cpp',
    'api/common/repositories.cpp',
    'impl/manifest/operations/parser/parser.cpp',
    'impl/manifest/operations/parser/parserfactory.cpp',
    'impl/manifest/operations/serializer/serializer.cpp',
    'impl/manifest/operations/serializer/serializerfactory.cpp',
    'impl/manifest/operations/packagerepositorybinder/packagerepositorybinder.cpp',
    'impl/manifest/objects/manifest/manifestparser.cpp',
    'impl/manifest/objects/manifest/manifestfactory.cpp',
    'impl/manifest/objects/manifest/manifestserializer.cpp',
    'impl/manifest/objects/manifest/manifest.cpp',
    'impl/manifest/objects/module/module.cpp',
    'impl/manifest/objects/module/moduleparser.cpp',
    'impl/manifest/objects/module/moduleserializer.cpp',
    'impl/manifest/objects/module/modulefactory.cpp',
    'impl/manifest/objects/checksum/checksum.cpp',
    'impl/manifest/objects/checksum/checksumserializer.cpp',
    'impl/manifest/objects/checksum/checksumfactory.cpp',
    'impl/manifest/objects/checksum/checksumparser.cpp',
    'impl/manifest/objects/packages/packages.cpp',
    'impl/manifest/objects/packages/packagesfactory.cpp',
    'impl/manifest/objects/packages/packagesparser.cpp',
    'impl/manifest/objects/packages/packagesserializer.cpp',
    'impl/manifest/objects/nevra/nevraparser.cpp',
    'impl/manifest/objects/nevra/nevra.cpp',
    'impl/manifest/objects/nevra/nevrafactory.cpp',
    'impl/manifest/objects/package/packageparser.cpp',
    'impl/manifest/objects/package/packagefactory.cpp',
    'impl/manifest/objects/package/packageserializer.cpp',
    'impl/manifest/objects/package/package.cpp',
    'impl/input/operations/parser/parser.cpp',
    'impl/input/operations/parser/parserfactory.cpp',
    'impl/input/operations/prototypefileconverter/prototypefileconverter.cpp',
    'impl/input/objects/options/options.cpp',
    'impl/input/objects/options/optionsfactory.cpp',
    'impl/input/objects/options/optionsparser.cpp',
    'impl/input/objects/input/inputfactory.cpp',
    'impl/input/objects/input/inputparser.cpp',
    'impl/input/objects/input/input.cpp',
    'impl/input/objects/modules/modulesparser.cpp',
    'impl/input/objects/modules/modules.cpp',
    'impl/input/objects/modules/modulesfactory.cpp',
    'impl/input/objects/packages/packages.cpp',
    'impl/input/objects/packages/packagesfactory.cpp',
    'impl/input/objects/packages/packagesparser.cpp',
    'impl/common/operations/stringlistparser/stringlistparser.cpp',
    'impl/common/tools/stringsplitter/stringsplitter.cpp',
    'impl/common/yaml/yamlnode.cpp',
    'impl/common/yaml/yamlparser.cpp',
    'impl/common/yaml/yamlserializer.cpp',
    'impl/common/yaml/yamlnodefactory.cpp',
    'impl/common/objects/repositories/repositoriesfactory.cpp',
    'impl/common/objects/repositories/repositoriesparser.cpp',
    'impl/common/objects/repositories/repositoriesserializer.cpp',
    'impl/common/objects/repositories/repositories.cpp',
    'impl/common/objects/repository/repositoryparser.cpp',
    'impl/common/objects/repository/repository.cpp',
    'impl/common/objects/repository/repositoryserializer.cpp',
    'impl/common/objects/repository/repositoryfactory.cpp',
    'impl/common/objects/version/version.cpp',
    'impl/common/objects/version/versionserializer.cpp',
    'impl/common/objects/version/versionparser.cpp',
    'impl/common/objects/version/versionfactory.cpp',
]

deps = [
    yaml
]

libpkgmanifest = library(
    'pkgmanifest',
    libpkgmanifest_sources,
    include_directories : inc,
    version : '0.5.9',
    install : true,
    dependencies : deps
)

pkg = import('pkgconfig')
pkg.generate(libpkgmanifest)
